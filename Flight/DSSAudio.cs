//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;

public class DSSAudio: MonoBehaviour
{
	[SerializeField] AudioClip engineSound;                     		// Looped engine sound, whose pitch and volume are affected by the plane's throttle setting.
	[SerializeField] float engineMinThrottlePitch = 0.4f;				// Pitch of the engine sound when at minimum throttle.
	[SerializeField] float engineMaxThrottlePitch = 2f;					// Pitch of the engine sound when at maximum throttle.
	[SerializeField] float engineFwdSpeedMultiplier = 0.002f;       	// Additional multiplier for an increase in pitch of the engine from the plane's speed.
	
	[SerializeField] AudioClip windSound;                   			// Looped wind sound, whose pitch and volume are affected by the plane's velocity.
	[SerializeField] float windBasePitch = 0.2f;						// starting pitch for wind (when plane is at zero speed)
	[SerializeField] float windSpeedPitchFactor = 0.004f;       		// Relative increase in pitch of the wind from the plane's speed.
	[SerializeField] float windMaxSpeedVolume = 100;					// the speed the aircraft much reach before the wind sound reaches maximum volume.

	[SerializeField] string debug;

	private Dictionary<PowerPlant, AudioSource> engineSoundSources;     // Reference to the AudioSource for the engines.
	private AudioSource windSoundSource;                            	// Reference to the AudioSource for the wind.
	private DSSController plane;                                  // Reference to the aeroplane controller.
	
	[SerializeField] private AdvancedSetttings advanced = new AdvancedSetttings(); // container to make advanced settings appear as rollout in inspector
	
	[System.Serializable]
	public class AdvancedSetttings                                      // A class for storing the advanced options.
	{
		public float engineMinDistance = 50f;                           // The min distance of the engine audio source.
		public float engineMaxDistance = 1000f;                         // The max distance of the engine audio source.
		public float engineDopplerLevel = 1f;                           // The doppler level of the engine audio source.
		[Range(0f, 1f)] public float engineMasterVolume = 0.5f;       	// An overall control of the engine sound volume.
		public float windMinDistance = 10f;                         	// The min distance of the wind audio source. 
		public float windMaxDistance = 100f;                       		// The max distance of the wind audio source.
		public float windDopplerLevel = 1f;                         	// The doppler level of the wind audio source.					
		[Range(0f, 1f)] public float windMasterVolume = 0.5f;       	// An overall control of the wind sound volume.
	}
	
	
	void Awake ()
	{
		// Set up the reference to the aeroplane controller.
		plane = GetComponent<DSSController>();	
		engineSoundSources = new Dictionary<PowerPlant, AudioSource>();

		// Add the audiosources and get the references.
		windSoundSource = gameObject.AddComponent<AudioSource>();
		
		// Assign clips to the audiosources.
		windSoundSource.clip = windSound;
		
		// Set the parameters of the audiosources.
		windSoundSource.minDistance = advanced.windMinDistance;
		windSoundSource.maxDistance = advanced.windMaxDistance;
		windSoundSource.loop = true;
		windSoundSource.dopplerLevel = advanced.windDopplerLevel;
		
		// Start the sounds playing.
		windSoundSource.Play();	
	}

	void UpdateEngine()
	{
		if(plane == null)
			plane = GetComponent<DSSController>();	

		foreach (var p in plane.PowerPlants.Values) 
		{
			if(!engineSoundSources.ContainsKey(p))
			{
				var engineSoundSource = gameObject.AddComponent<AudioSource>();
				
				// Add the audiosources and get the references.
				engineSoundSources.Add(p, engineSoundSource);
				
				// Assign clips to the audiosources.
				engineSoundSource.clip = engineSound;
				
				// Set the parameters of the audiosources.
				engineSoundSource.minDistance = advanced.engineMinDistance;
				engineSoundSource.maxDistance = advanced.engineMaxDistance;
				engineSoundSource.loop = true;
				engineSoundSource.dopplerLevel = advanced.engineDopplerLevel;
				
				// Start the sounds playing.
				engineSoundSource.Play();
			}
		}
	}
	
	void Update ()
	{
		UpdateEngine ();

		debug = engineSoundSources.Count.ToString ();

		foreach (var e in engineSoundSources) 
		{
			// Find what proportion of the engine's power is being used.
			var enginePowerProportion = Mathf.InverseLerp(0, e.Key.afterBurnThrust, e.Key.thrust);
			
			// Set the engine's pitch to be proportional to the engine's current power.
			e.Value.pitch = Mathf.Lerp(engineMinThrottlePitch, engineMaxThrottlePitch, enginePowerProportion);
						
			// Set the engine's volume to be proportional to the engine's current power.
			e.Value.volume = Mathf.InverseLerp(0, advanced.engineMasterVolume, e.Key.thrust);
		}

		// Set the wind's pitch and volume to be proportional to the aeroplane's forward speed.
		float planeSpeed = GetComponent<Rigidbody>().velocity.magnitude;
		windSoundSource.pitch = windBasePitch + planeSpeed * windSpeedPitchFactor;	
		windSoundSource.volume = Mathf.InverseLerp( 0, windMaxSpeedVolume, planeSpeed ) * advanced.windMasterVolume;
		
	}
}


